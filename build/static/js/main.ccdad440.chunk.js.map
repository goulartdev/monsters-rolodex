{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","props","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAoBeA,G,YAVF,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QACd,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,YAC1E,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,aCMHC,G,MAVE,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAClB,OACE,qBAAKP,UAAU,YAAf,SACGO,EAASC,KAAI,SAAAT,GACZ,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,WCKnBO,G,MAXG,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,aAChC,OACE,uBACEC,KAAK,OACLZ,UAAU,eACVU,YAAaA,EACbG,SAAUF,MC2CDG,E,kDAzCb,WAAYC,GAAkB,IAAD,8BAC3B,cAAMA,IAgBRJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAf1C,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALY,E,gEAWR,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,+BAOlC,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YAEZU,EAAmBrB,EAASsB,QAAO,SAAA9B,GACvC,OAAOA,EAAQK,KAAK0B,cAAcC,SAASb,EAAYY,kBAGzD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEU,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUJ,SAAUqB,W,GArCVI,aCDHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ccdad440.chunk.js","sourcesContent":["import React from 'react';\n\nimport Monster from '../../model/monster';\n\nimport './card.styles.css';\n\ninterface CardProps {\n  monster: Monster;\n}\n\nconst Card = ({ monster }: CardProps) => {\n  return (\n    <div className=\"card-container\">\n      <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\n\nimport Monster from '../../model/monster';\nimport Card from '../card/card.component';\n\nimport './card-list.styles.css';\n\ninterface CardListProps {\n  monsters: Monster[]\n}\n\nconst CardList = ({ monsters }: CardListProps) => {\n  return (\n    <div className=\"card-list\">\n      {monsters.map(monster => {\n        return <Card key={monster.id} monster={monster} />\n      })}\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nimport './search-box.styles.css';\n\ninterface SearchBoxProps {\n  placeholder: string;\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchBox = ({ placeholder, handleChange }: SearchBoxProps) => {\n  return (\n    <input \n      type=\"text\" \n      className=\"search-input\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  )\n}\n\nexport default SearchBox;\n\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Monster from './model/monster';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  monsters: Monster[],\n  searchField: string\n}\n\nclass App extends Component<AppProps, AppState> {\n  \n  constructor(props: AppProps) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    // this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}));\n  }\n  \n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder=\"search monsters\" \n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}